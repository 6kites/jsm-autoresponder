import Resolver from '@forge/resolver';
import api, { route, properties } from '@forge/api';
import { ISSUE_PROPERTY_KEY, addComment, callChatGPT, getGptWithHistoryContext, getIssueDetails } from '../utils';
const resolver = new Resolver();

resolver.define('fetchLabels', async (req) => {
  const key = req.context.extension.issue.key;

  const res = await api.asUser().requestJira(route`/rest/api/3/issue/${key}?fields=labels`);

  const data = await res.json();

  const label = data.fields.labels;
  if (label == undefined) {
    console.warn(`${key}: Failed to find labels`);
    return [];
  }

  return label;
});

resolver.define("getData", async (req) => {
  const { issue, project } = req.context.extension
  const { key } = issue
  // let answer = await getIssueProperty(key, ISSUE_PROPERTY_KEY.default)
  let answer = await properties.onJiraIssue(key).get(ISSUE_PROPERTY_KEY.default)
  const prompt = await properties.onJiraIssue(key).get(ISSUE_PROPERTY_KEY.prompt)
  const issueDetails = await getIssueDetails(key);
  const projectSettings = await properties.onJiraProject(project.key).get(ISSUE_PROPERTY_KEY.default)
  //console.log("INSIDE 'getText'", issue);
  const description = issueDetails.fields.description.content[0].content[0].text;
  
  let context = {
    issue,
    project,
    projectSettings,
    answer,
    mode: "VIEW",
    prompt: prompt || description,
    testing: "This response was generated by ChatGPT. Just kidding ... not yet",
  };
  console.log("RESOLVER RETURNING CONTEXT", context);

  return context;
});

resolver.define("callChatGPT", async (req) => {
  const { key } = req.context.extension.issue
  const prompt = req.payload?.prompt
  const { response } = await getGptWithHistoryContext(key, prompt)
  const answer = response.choices[0].message.content
  // save the answer to an issue property
  await properties.onJiraIssue(key).set(ISSUE_PROPERTY_KEY.default, { ai_response: answer })
  return { answer }
})

resolver.define("removeAiResponse", async (req) => {
  const { key } = req.context.extension.issue
  await properties.onJiraIssue(key).delete(ISSUE_PROPERTY_KEY.default)
})

resolver.define("addComment", async (req) => {
  const { key } = req.context.extension.issue
  const comment = req.payload?.comment
  // console.log("Inside 'addComment` resolver -> ", comment)
  const response = await addComment(key, comment)
  return response
})

export const handler = resolver.getDefinitions();
